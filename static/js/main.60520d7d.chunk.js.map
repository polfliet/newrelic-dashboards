{"version":3,"sources":["DatasourceItem.js","Datasource.js","Preview.js","Home.js","View.js","App.js","serviceWorker.js","index.js"],"names":["DatasourceItem","props","name","source","state","class","this","React","Component","Datasource","console","log","sources","map","i","App","className","src","dashboard","alt","config","dataSources","to","author","Home","data","id","dashboards","Preview","match","params","handle","find","element","path","component","View","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60520d7d.chunk.js","sourcesContent":["import React from 'react';\n\nclass DatasourceItem extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    let name = '';\n    switch(props.source) {\n        case 'Transaction': name = 'APM'; break;\n        case 'SystemSample': name = 'Infrastructure'; break;\n        case 'ProcessSample': name = 'Infrastructure - Processes'; break;\n        default:\n            name = props.source;\n        break;\n    }\n\n    this.state = {\n        name,\n    };\n  }\n\n  render() {\n    return (\n        <div>\n            <span class=\"badge badge-primary\">{this.state.name}</span>\n        </div>\n    );\n  }\n\n}\n\nexport default DatasourceItem;\n","import React from 'react';\nimport DatasourceItem from './DatasourceItem';\n\nclass Datasource extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    console.log(props);\n  }\n\n  render() {\n    return (\n        <div>\n            {this.props.sources.map((source, i) => {\n                return (<DatasourceItem source={source} />)\n            })}\n        </div>\n    );\n  }\n\n}\n\nexport default Datasource;\n","import React from 'react';\nimport Datasource from './Datasource';\nimport {\n    Link\n  } from \"react-router-dom\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    console.log(props);\n  }\n\n  render() {\n    return (\n        <div className=\"col-md-4\">\n            <div className=\"card mb-4 shadow-sm\">\n                <img src={ \"data/\" + this.props.dashboard.name + \"/screenshot.png\"} className=\"card-img-top\" alt=\"...\" />\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{ this.props.dashboard.config.name }</h5>\n                    <p><Datasource sources={this.props.dashboard.dataSources} /></p>\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                        <div className=\"btn-group\">\n                            <Link className=\"btn btn-sm btn-outline-secondary\" to={\"/view/\" + this.props.dashboard.name}>View</Link>\n                        </div>\n                        <small className=\"text-muted\">Created by: { this.props.dashboard.config.author }</small>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport Preview from './Preview';\nimport data from './data.json';\n\nclass Home extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        console.log('data', data);\n    }\n\n    render() {\n        return (\n            <div>\n                <section class=\"jumbotron text-center\">\n                    <div class=\"container\">\n                        <h1>New Relic - Dashboards</h1>\n                        <p class=\"lead text-muted\">Library of selected New Relic dashboards with their dependencies.</p>\n                    </div>\n                </section>\n\n                <div className=\"album py-5 bg-light\">\n                    <div className=\"container\" id=\"root\">\n                        <div className=\"row\">\n                        {data.dashboards.map((dashboard, i) => {\n                            return (<Preview dashboard={dashboard} />)\n                        })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Home;\n","import React from 'react';\nimport Datasource from './Datasource';\nimport data from './data.json';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    console.log('view', props.match.params.handle, data);\n\n    this.state = {\n        'dashboard': data.dashboards.find(element => element.name === props.match.params.handle),\n    };\n  }\n\n  render() {\n    return (\n        <div className=\"album py-5 bg-light\">\n            <div className=\"container\" id=\"root\">\n                <div className=\"row\">\n                    <h2>{ this.state.dashboard.config.name }</h2>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-8\">\n                        <p><b>Created by:</b> { this.state.dashboard.config.author }</p>\n                        <p><b>Sources:</b> <Datasource sources={this.state.dashboard.dataSources} /></p>\n                    </div>\n                    <div className=\"col-4\">\n                        <p><button className=\"btn btn-primary\">Import (TODO)</button></p>\n                        <p><button className=\"btn btn-primary\">Copy to clipboard (TODO)</button></p>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <h3>Screenshot</h3>\n                    <img src={ \"data/\" + this.state.dashboard.name + \"/screenshot.png\"} className=\"card-img-top\" alt=\"...\" />\n                </div>\n            </div>\n        </div>\n    );\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n  } from \"react-router-dom\";\nimport Home from './Home';\nimport View from './View';\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route path=\"/view/:handle\" component={View} />\n                    <Route path=\"/\" component={Home} />\n                </Switch>\n            </Router>\n        )\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}